// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    //REGISTRADOR A
    Not(in=instruction[15], out=aInstruction); //Determina se a instrução é do tipo A
    Mux16(a=outALU ,b=instruction ,sel=aInstruction, out=inARegister); //Determina o IN do Registrador A
    Or(a=aInstruction, b=instruction[5], out= loadARegister); //Sinal de load do Registrador A
    ARegister (in=inARegister, load=loadARegister, out=registerA, out[0..14]=addressM); //Registrador A

    //REGISTRADOR D
    And(a=instruction[4], b=instruction[15], out=loadD); //O load de D só é habilitado caso a instrução seja do tipo C
    DRegister (in=outALU, load=loadD, out=registerD); // Registrador D, load vem do bit D2 das C-Instruction

    //PC
    And(a=instruction[2], b=ng, out= jumpNegative); //Caso J1 esteja setado e outALU seja negativo
    And(a=instruction[1], b=zr, out= jumpZero); //Caso J2 esteja setado e outALU for 0

    Not(in=ng, out=nNg); //se o outALU for positivo ps=1
    Not(in=zr, out=nZero); //se o outALU for diferente de zero, nZero=1
    And(a=nNg, b=nZero, out=positivo);
    And(a=instruction[0], b=positivo, out=jumpPositive); //Caso J3 esteja setado e outALU seja positivo

    Or(a=jumpNegative, b=jumpZero, out=NorZ);
    Or(a=NorZ, b=jumpPositive, out=sinalPC);
    And(a=sinalPC, b=instruction[15], out=loadPC); //O Load só é habilitado caso a instrução seja do tipo C

    PC(in= registerA, load=loadPC, inc=true, reset=reset, out[0..14]=pc); //PC inc foi setado como sempre TRUE

    //ALU
    Mux16(a=registerA, b=inM, sel=instruction[12], out=inALU); //Escolhe a entrada y da ALU entre o Registrador A e a Memoria de acordo com o bit a

    ALU(x= registerD ,y=inALU ,zx=instruction[11] ,nx= instruction[10] ,zy= instruction[9] ,ny= instruction[8] ,f= instruction[7] ,no= instruction[6] ,out= outM, out=outALU ,zr= zr,ng= ng );

    //write M
    And(a=instruction[3], b=instruction[15], out=writeM); //O Write M só é habilitado caso a instrução seja do tipo C

}